{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"section/EntLinux/","text":"En estos primeros pasos veremos algunos conceptos muy b\u00e1sicos que es necesario dominar previo a adquirir cualquier conocimiento relativo a la seguridad de sistemas. Estas nociones b\u00e1sicas nos dar\u00e1n las herramientas principales para desenvolvernos dentro de un sistema y entender los principios de ciberseguridad que se presentar\u00e1n con posterioridad. Estructura de ficheros Un sistema de archivos, llamado com\u00fanmente File System o FS, determina la organizaci\u00f3n de los datos en un soporte de almacenamiento, y por tanto, c\u00f3mo gestiona y organiza el sistema operativo los archivos. Linux es, como todo Unix, un sistema operativo completamente orientado a archivos. Se representa todo (o casi todo) con un archivo, tanto los datos (archivos de datos de cualquier tipo, como una imagen o un programa) como los perif\u00e9ricos (terminales, ratones, teclado, tarjeta sonido, etc.) o incluso los medios de comunicaci\u00f3n (sockets, tuber\u00edas nombradas, etc.). Se puede decir que el sistema de archivos es el coraz\u00f3n de cualquier sistema Unix. Un archivo es una entidad que almacena datos y programas. Se compone de contenido y metadatos (tama\u00f1o del archivo, propietario, fecha de creaci\u00f3n, permisos). Los archivos est\u00e1n organizados en directorios. Un directorio es un archivo que almacena otros archivos. Los diferentes tipos de archivos incluyen: Archivos regulares que almacenan datos y programas. Directorios que contienen otros archivos. Archivos especiales que se utilizan para entrada y salida. Todo en Linux es un archivo , por lo que saber c\u00f3mo manipularlos es muy importante. As\u00ed pues, en la secci\u00f3n correspondiente, veremos las operaciones b\u00e1sicas con archivos mediante el terminal. La estructura de los directorios de Linux, as\u00ed como su contenido y funciones, viene definida en el denominado Filesystem Hierarchy Standard o FHS por sus siglas en ingl\u00e9s, que en otras palabras viene a ser el est\u00e1ndar de jerarqu\u00eda para los sistemas de archivos en sistemas Linux y otros derivados de UNIX. Como pod\u00e9is ver en la siguiente imagen, todo el \u00e1rbol de parte de una ra\u00edz com\u00fan denominada root y que se simboliza por una barra inclinada. A\u00fan as\u00ed, esto no significa que varios de ellos no puedan estar en particiones separadas del resto. De hecho, en muchas distros GNU/Linux es una pr\u00e1ctica muy com\u00fan el hecho ubicar ciertos directorios en particiones separadas del resto. La FHS distingue entre lo que ser\u00edan directorios est\u00e1ticos, que son aquellos que contienen binarios, bibliotecas, documentaci\u00f3n, etc., de los din\u00e1micos, que son aquellos que requieren de acciones m\u00e1s a menudo, tales como copias de seguridad, etc. Tambi\u00e9n podemos diferencias claramente lo que son los directorios compartibles, que significa que contienen ficheros que pueden utilizarse desde otros dispositivos, de los no compartibles, que solo pueden utilizarse desde el dispositivo en el que se encuentran. Directorio ra\u00edz o \"/\" Toda la estructura de directorios en los sistemas basados en UNIX parte de un directorio ra\u00edz tambi\u00e9n llamado directorio root y que se simboliza por una barra inclinada o /. De este directorio, es desde donde nacen todo el resto de directorios, independientemente que est\u00e9n almacenados f\u00edsicamente en discos o unidades separadas. Cualquier direcci\u00f3n de archivo o carpeta en Linux empieza por el directorio ra\u00edz o /, seguido de todos los directorios y subdirectorios que que lo contienen, separados cada uno de ellos por /. A continuaci\u00f3n conocer\u00e1s con m\u00e1s en detalle a todos los directorios principales que parten del directorio ra\u00edz, junto con sus subdirectorios m\u00e1s importantes y los ficheros que suelen contener. Directorio/s bin, sbin El directorio /bin es un directorio est\u00e1tico y es donde se almacenan todos los binarios necesarios para garantizar las funciones b\u00e1sicas a nivel de usuario. Solo almacena los ejecutables de usuario, ya que los binarios necesarios para tareas administrativas gestionadas por el usuario root o superusuario del sistema se encuentran en el directorio /sbin. Incluye tambi\u00e9n los binarios que permiten la ejecuci\u00f3n de varias utilidades est\u00e1ndar de la terminal de Linux, concretamente cat, cd, cp, echo, grep, gzip, kill, ls, mv, rm, ping, su, ps, tar y vi. El directorio /sbin hace lo mismo pero para los binarios relativos tareas propias del sistema operativo, y que solamente pueden ser gestionadas por el usuario root, tales como el arranque, tareas de restauraci\u00f3n, reparaci\u00f3n, etc. Directorio /boot Es un directorio est\u00e1tico y contiene los archivos necesarios para arrancar el sistema. Los archivos del cargador de arranque GRUB y los kernels de Linux se almacenan aqu\u00ed, por ejemplo. Sin embargo, los archivos de configuraci\u00f3n del cargador de arranque no se encuentran aqu\u00ed, est\u00e1n en / etc con los otros archivos de configuraci\u00f3n. A la hora de instalar el sistema es importante prever bien el espacio que se le vaya a dar a la partici\u00f3n, ya que a la larga, con la acumulaci\u00f3n de diferentes actualizaciones del Kernel, es com\u00fan que se quede sin espacio. Si esto sucede, se pueden tener problemas a la hora de instalar futuras actualizaciones del n\u00facleo, y ser\u00e1 necesario hacer limpieza de versiones antiguas del kernel. Directorio /dev Este directorio incluye todos los dispositivos de almacenamiento, en forma de archivos especiales, conectados al sistema. Es decir, cualquier disco duro, partici\u00f3n, memoria USB, o CDROM conectado al sistema y que el sistema pueda entender como un volumen l\u00f3gico de almacenamiento. Siendo esto as\u00ed, ver\u00e9is que la ruta en la que se encuentra cualquier volumen (partici\u00f3n o dispositivo externo) conectado al sistema siempre empieza por /dev. Este es el directorio que contiene, por decirlo de alg\u00fan modo, la informaci\u00f3n de cada uno de los vol\u00famenes, a diferencia del directorio /media , que veremos m\u00e1s adelante, que lo que contiene son solo los puntos de montaje, pero no la informaci\u00f3n real de estos vol\u00famenes. Para ver esto en la pr\u00e1ctica, si abres una ventana de terminal y ejecutas el comando sudo fdisk -l , ver\u00e1s la estructura de particiones de tu sistema. En una instalaci\u00f3n t\u00edpica de cualquier distro GNU/Linux suele ser la siguiente: /dev/sda1 - Partici\u00f3n principal /dev/sda2 - Partici\u00f3n extendida /dev/sda5 - Partici\u00f3n Swap Estos no son archivos reales como los conocemos, pero aparecen como archivos; por ejemplo, /dev/sda representa la primera unidad SATA del sistema. Eso en cuanto a particiones. Si se trata de un dispositivo externo, el volumen estar\u00e1 igualmente dentro de /dev, pero en este caso var\u00eda el nombre que el sistema le asigna a dicho volumen. Generalmente la estructura suele ser la siguiente (ejecutando nuevamente el comando sudo fdisk -l con un dispositivo externo conectado puede comprobarse). /dev/sdb1 /dev/sdb2 /dev/sdb3 ... Este directorio tambi\u00e9n contiene pseudodispositivos, que son dispositivos virtuales que en realidad no se corresponden con el hardware. Por ejemplo, /dev/random produce n\u00fameros aleatorios. Otro ejemplo ser\u00eda el de /dev/null , un dispositivo especial que no produce salida y descarta autom\u00e1ticamente todas las entradas; cuando canaliza la salida de un comando a /dev/null , la descarta. Directorio /etc El directorio /etc contiene archivos de configuraci\u00f3n, que generalmente se pueden editar a mano en un editor de texto. Se debe tener en cuenta que el directorio /etc contiene archivos de configuraci\u00f3n de todo el sistema, adem\u00e1s de las aplicaciones y programas instaladas posteriormente; los archivos de configuraci\u00f3n espec\u00edficos del usuario se encuentran en el directorio de inicio de cada usuario. Es un directorio que deber\u00eda contener \u00fanicamente ficheros de configuraci\u00f3n, y no deber\u00eda contener binarios. Directorio lib Incluye las bibliotecas esenciales que son necesarias para que se puedan ejecutar correctamente todos los binarios que se encuentran en los directorios /bin y /sbin , as\u00ed como los m\u00f3dulos del propio kernel. En los sistemas operativos de 64 bits, adem\u00e1s de /lib existe otro directorio denominado /lib64 , referida a las bibliotecas para aplicaciones de 64 bits. Directorio media Representa el punto de montaje de todos los vol\u00famenes l\u00f3gicos que se montan temporalmente. Es decir, El directorio /media contiene subdirectorios donde se montan los dispositivos de medios extra\u00edbles insertados en el ordenador. En la mayor\u00eda de distribuciones GNU/Linux, desde hace ya alg\u00fan tiempo, cada vez que se monta una unidad externa, partici\u00f3n, etc., esta se monta dentro del directorio /media y a su vez dentro de un directorio especifico dependiendo del usuario del sistema que monta el volumen. De este modo, si en un sistema hay varios usuarios, pongamos User1 y User2, los puntos de montaje de los vol\u00famenes que montan cada uno de ellos se mostraran en directorios separados tal como as\u00ed: /media/User1 /media/User2 Directorio opt El directorio /opt contiene subdirectorios para paquetes de software opcionales. Es com\u00fanmente utilizado por software propietario que no obedece a la jerarqu\u00eda del sistema de archivos est\u00e1ndar; por ejemplo, un programa propietario puede volcar sus archivos en /opt/ NombreAplicacion cuando se instala. Antiguamente se sol\u00eda utilizar el directorio mnt para estas funciones, pero actualmente, la mayor\u00eda de distribuciones hacen uso de media. Directorio proc Este directorio contiene informaci\u00f3n de los procesos y aplicaciones que se est\u00e1n ejecutando en un momento determinado en el sistema, pero realmente no guarda nada como tal, ya que lo que almacena son archivos virtuales, por lo que el contenido de este directorio es nulo. Directorio /root El directorio /root es el directorio de inicio del usuario root. En lugar de estar ubicado en /home/root , est\u00e1 ubicado en /root . Es distinto de / , que es el directorio ra\u00edz del sistema. Directorio tmp Las aplicaciones almacenan archivos temporales en el directorio /tmp . Estos archivos generalmente se eliminan cada vez que se reinicia su sistema y pueden ser eliminados en cualquier momento por utilidades como tmpwatch. Las aplicaciones programadas para almacenar archivos en este directorio deben asumir que solo ser\u00e1n recuperables en la sesi\u00f3n actual. En este sentido, hay otro subdirectorio, /var/tmp , dispuesto igualmente para el almacenamiento de archivos temporales, pero cuyo contenido no se borra de forma autom\u00e1tica tras el reinicio del sistema. Directorio usr El directorio /usr contiene aplicaciones y archivos utilizados por los usuarios, a diferencia de las aplicaciones y archivos utilizados por el sistema, incluyendo todo el software instalado a trav\u00e9s de los gestores de paquetes de cada distribuci\u00f3n. Por ejemplo, las aplicaciones no esenciales se encuentran dentro del directorio /usr/bin en lugar del directorio /bin y los binarios de administraci\u00f3n del sistema no esenciales se encuentran en el directorio /usr/sbin en lugar del directorio /sbin . Las bibliotecas para cada uno se encuentran dentro del directorio /usr/lib . El directorio /usr tambi\u00e9n contiene otros directorios; por ejemplo, los archivos independientes de la arquitectura, como los gr\u00e1ficos, se encuentran en /usr/share : /usr/bin /usr/include /usr/lib /usr/local /usr/sbin /usr/share /usr/src El directorio /usr/local es donde se instalan las aplicaciones compiladas localmente de forma predeterminada; esto evita que arruinen el resto del sistema Directorio var Este directorio contiene varios archivos con informaci\u00f3n del sistema, como archivos de logs, emails de los usuarios del sistema, bases de datos, informaci\u00f3n almacenada en la cach\u00e9 o informaci\u00f3n relativa a los paquetes de aplicaciones almacenados en /opt . En cierto modo se podr\u00eda decir que act\u00faa a modo de registro del sistema. Podr\u00eda decirse que el directorio /var es la contraparte \"escriturable\" del directorio /usr , que debe ser de solo lectura en el funcionamiento normal. Los archivos de registro y todo lo dem\u00e1s que normalmente se escribir\u00eda en /usr durante el funcionamiento normal se escriben en el directorio /var . Directorio home El directorio /home contiene una carpeta de inicio para cada usuario. Por ejemplo, si el nombre de usuario es raul, habr\u00e1 una carpeta de inicio ubicada en /home/raul . Esta carpeta de inicio contiene los archivos de datos del usuario y los archivos de configuraci\u00f3n espec\u00edficos del usuario (configuraciones de programas, por ejemplo). Cada usuario solo tiene acceso de escritura \u00fanicamente a su propia carpeta de inicio y debe convertirse en root para poder tener privilegios que le permitan modificar otros archivos en el sistema. Para visualizar los ficheros ocultos dentro del directorio individual de cada usuario, se puede usar la combinaci\u00f3n de comandos CTRL + H en modo gr\u00e1fico. Todos los archivos y carpetas ocultas en Linux empiezan por un punto, seguido del nombre. En muchas distribuciones es una pr\u00e1ctica recomendada el hecho de ubicar el directorio /home es una partici\u00f3n separada del resto, por tal de facilitar que, en caso de reinstalar el sistema operativo, puedas mantener intacta la partici\u00f3n de la /home , y de este modo mantener todos los archivos personales. Usuarios y grupos Un usuario es cualquiera que use un ordenador. En este caso, estamos describiendo los nombres que representan a esos usuarios. Puede ser Pol o Mart\u00ed, y pueden usar los nombres superc0der o Pirate en lugar de su nombre real. Lo \u00fanico que importa es que la computadora tenga un nombre para cada cuenta que cree, y es este nombre por el que una persona obtiene acceso para usar la computadora. Algunos servicios del sistema tambi\u00e9n se ejecutan utilizando cuentas de usuario restringidas o privilegiadas. La administraci\u00f3n de los usuarios se realiza con fines de seguridad al limitar el acceso de ciertas maneras espec\u00edficas. El superusuario (root) tiene acceso completo al sistema operativo y su configuraci\u00f3n; est\u00e1 destinado solo para uso administrativo. Los usuarios sin privilegios pueden usar los programas su y sudo para la escalada de privilegios controlada. Cualquier persona puede tener m\u00e1s de una cuenta, siempre que utilicen un nombre diferente para cada una de ellas. Adem\u00e1s, hay algunos nombres reservados que no se pueden usar, como \u00abroot\u00bb. Los usuarios pueden aglutinarse en un \u00abgrupo\u00bb y, del mismo modo, pueden a\u00f1adirse a un grupo existente para utilizar el acceso privilegiado que dicho grupo concede. Los grupos de usuarios juegan un papel esencial en los sistemas Linux. Gracias a ellos tenemos una manera muy f\u00e1cil de seleccionar grupos de usuarios a los que se les permite compartir archivos entre ellos. Tambi\u00e9n proporcionan a los administradores de sistemas una manera m\u00e1s efectiva y sencilla de gestionar los privilegios de los usuarios puesto que permiten asignar privilegios a grupos completos en lugar de a usuarios individuales. Permisos Aunque hay multitud de caracter\u00edsticas de seguridad integradas en los sistemas basados \u200b\u200ben Linux, puede existir una vulnerabilidad potencial muy importante cuando se otorga el acceso al sistema a los usuarios. Pueden aparecer problemas cuando no se han asignado los permisos adecuados a los archivos y directorios. Grupos de permisos Cada archivo y directorio tiene tres grupos de permisos basados \u200b\u200ben usuarios: Propietario: los permisos de propietario se aplican solo al propietario del archivo o directorio, no afectar\u00e1n las acciones de otros usuarios. Grupo: los permisos de grupo se aplican solo al grupo que se ha asignado al archivo o directorio, no afectar\u00e1n las acciones de otros usuarios. Todos los usuarios: los permisos de todos los usuarios se aplican a todos los dem\u00e1s usuarios del sistema; este es el grupo de permisos que m\u00e1s desea ver. Tipos de permisos Cada archivo o directorio tiene tres tipos de permisos b\u00e1sicos: Lectura (read/r): el permiso de lectura se refiere a la capacidad de un usuario para leer el contenido del archivo. El permiso de lectura en un directorio permite listar su contenido. Escritura (write/w): los permisos de escritura se refieren a la capacidad de un usuario para escribir o modificar un archivo. En un directorio permite crear, eliminar o modificar el nombre de un archivo. En un hipot\u00e9tico caso donde tuvi\u00e9ramos permiso de escritura en un archivo pero no en el directorio en el que est\u00e1 ubicado, podr\u00edamos modificar el contenido del archivo pero no su nombre, ni moverlo de sitio, ni eliminarlo del directorio. Ejecuci\u00f3n (execution/x): el permiso de ejecuci\u00f3n afecta la capacidad de un usuario para ejecutar un archivo o ver el contenido de un directorio. Tip Podemos inspeccionar con detalle los permisos de arhivos y directorios con el comando: ls -l \u00bfC\u00f3mo se cambian los permisos en Linux? Para cambiar los permisos de archivos y directorios en GNU/Linux, disponemos de 3 comandos principales: chmod: cambiar permisos del archivo o directorio: chmod [ permisos ][ archivo/directorio ][ opciones ] chown: cambiar el propietario del archivo o directorio: chown [ nuevo usuario propietario ][ archivo/directorio ][ opciones ] chgrp: cambiar el grupo del archivo o directorio: chgrp [ nuevo grupo ][ archivo/directorio ][ opciones ] Existen dos formas de cambiar los permisos de archivos y directorios en Linux: Modo simb\u00f3lico: con notaci\u00f3n basada en caracteres Modo absoluto: con notaci\u00f3n num\u00e9rica, seg\u00fan el sistema octal o en base 8 , cuyos valores de forma resumida puedne verse en la imagen a continuaci\u00f3n: As\u00ed pues, una tabla resumen en cu\u00e1nto a los permisos vistos, ser\u00eda la siguiente: Valor Permisos Descripci\u00f3n 0 --- Sin permisos 1 --x Ejecuci\u00f3n 2 -w- Lectura 3 -wx Lectura + ejecuci\u00f3n 4 r-- Lectura 5 r-x Lectura + ejecuci\u00f3n 6 rw- Lectura + escritura 7 rwx Lectura + escritura + ejecuci\u00f3n Los permisos utilizando la notaci\u00f3n num\u00e9rica en sistema octal, se asignan en tuplas de 3 (usuario/grupo/otros) y no es posible asignar s\u00f3lo para uno o dos de los elementos de la tupla. Algunos ejemplos de permisos en modo absoluto son: Notaci\u00f3n Significado rw------- (600) Permisos de lectura y escritura s\u00f3lo para el propietario rw-r--r-- (644) Permisos de lectura y escritura s\u00f3lo para el propietario y s\u00f3lo de lectura para el grupo y resto de usuarios rwxr-xr-x (755) Permisos de lectura, escritura y ejecuci\u00f3n para el usuario y de lectura y ejecuci\u00f3n para el grupo y resto de usuarios rwxrwxrwx (777) Usuario, grupo y resto de usuarios tienen todos los permisos sobre el fichero o directorio (\u00a1Cuidado!) rw-rw-rw- (666) Usuario, grupo y resto de usuarios pueden leer y escribir sobre el fichero o directorio(\u00a1cuidado!) Como ya hemos dicho es el comando chmod el utilizado en el terminal para cambiar los permisos de los usuarios. Puede usarse tanto con el modo absoluto como con el simb\u00f3lico. Un ejemplo para el formato absoluto ser\u00eda: chmod 600 archivo/directorio Y para el formato con caracteres chmod ugo+rw archivo/directorio Donde, en este \u00faltimo caso, los permisos rwx (lectura/escritura/ejecuci\u00f3n) pueden asignarse a: u - propietario g - grupo o - otros a - todos los usuarios Si utilizamos el operador + estaremos agregando permisos, si usamos el - los eliminaremos: chmod a-rw archivo1 chmod u+rwx archivo2 Ejemplos pr\u00e1cticos del uso de chmod para cambiar permisos de un archivo. Podemos utilizar tanto la forma absoluta, como la simb\u00f3lica: Modo absoluto Modo simb\u00f3lico Resultado chmod 700 archivo.gpg chmod u+rwx -rwx------ chmod 555 chmod ugo+rx -r-xr-xr-x chmod 666 -chmod ugo+rw rw-rw-rw- Permisos avanzados En GNU/Linux, adem\u00e1s de los 3 que hemos visto anteriormente, todav\u00eda existen otros tres permisos especiales adicionales que veremos a continuaci\u00f3n. Bit setuid En Linux, de forma predeterminada, cuando un usuario ejecuta un archivo, el archivo se inicia con los privilegios del usuario que lo ejecuta. Sin embargo, este comportamiento se puede cambiar si establecemos permisos especiales en archivos ejecutables. Setuid significa \"establecer ID de usuario\". Si configuramos el bit setuid en un archivo ejecutable, el archivo siempre se ejecuta con los privilegios del propietario del archivo, sin importar qui\u00e9n lo inicie. El bit setuid solo tiene sentido si est\u00e1 configurado en archivos ejecutables. No hay ning\u00fan significado pr\u00e1ctico si configuramos el bit setuid en un archivo o directorio no ejecutable. El comando passwd es un ejemplo con este bit especial aplicado: $ ls -l /bin/passwd -rwsr-xr-x 1 root root 63624 Dec 15 21 :06 /bin/passwd Observamos que el permiso de ejecuci\u00f3n para el propietario es una \"s\" min\u00fascula en lugar de la \"x\" habitual. Esta \"s\" indica que el archivo tiene el bit setuid establecido. El comando passwd siempre se ejecutar\u00e1 con privilegios de root sin importar qui\u00e9n lo inicie porque el propietario del archivo es root. Como ya sabemos, podemos usar el comando chmod para establecer el bit setuid en un archivo: chmod u+x archivo S\u00f3lo el propietario el archivo o el usuario o el usuario root puede establecer el bit setuid Un ejemplo pr\u00e1ctico de c\u00f3mo configurar este bit setuid en un archivo, de forma simb\u00f3lica: $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo $ chmod u+s archivo $ ls -l archivo -rwsr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo En el modo absoluto, anteponemos un 4 a los permisos para indicar este bit: $ chmod 4755 archivo -rwsr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo Y para quitar este bit, en ambos modos: $ chmod u-s archivo $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo y $ chmod 0755 archivo $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo Riesgo de seguridad El bit setuid podr\u00eda ser bastante \u00fatil en varias aplicaciones. Sin embargo, debemos tener cuidado al establecer esos permisos especiales, ya que pueden crear problemas de seguridad. Por ejemplo, un usuario normal puede obtener privilegios de superusuario ejecutando un programa que establece el UID como root y realizar una escalada de privilegios. Bit setgid Bit setgid en un archivo setgid es la abreviatura de \"set group id\". Si configuramos el bit setgid en un archivo ejecutable, no importa qui\u00e9n inicie el archivo, se ejecuta con los privilegios del grupo propietario. El comando de localizaci\u00f3n es un ejemplo de un archivo con el conjunto de bits setgid : $ ls -l /usr/bin/locate -rwxr-sr-x 1 root locate 43048 Nov 13 18 :09 /usr/bin/locate Similar al bit setuid , notamos una \"s\" min\u00fascula en la salida de ls , excepto que est\u00e1 en la secci\u00f3n de grupo en lugar de en la secci\u00f3n de propietario. Para establecer este bit de modo simb\u00f3lico podemos utilizar: $ ls -l archivo2 -rwxr-xr-x 1 raul raul 0 Feb 2 22 :35 archivo2 $ chmod g+s archivo2 $ ls -l archivo2 -rwxr-sr-x 1 raul raul 0 Feb 2 22 :35 archivo2 Y de modo absoluto, anteponiendo un dos a los permisos: chmod 2755 archivo2 Bit setgid en un directorio Si configuramos el bit setgid en un directorio, todos los archivos y subdirectorios reci\u00e9n creados en el directorio heredar\u00e1n el grupo de ese directorio. Sin embargo, los archivos y directorios existentes no aplicar\u00e1n el cambio de grupo. Veamos un ejemplo para aclarar este comportamiento. Primero, preparamos un directorio padre que contiene dos archivos: $ ls -ld padre drwxrwxrwx 2 root raul 4096 Feb 3 00 :33 padre/ $ ls -l padre total 2 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 existing_grp_invitado1 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 existing_grp_invitado2 padre es propiedad del usuario root y del grupo raul. Contiene dos archivos e invitado es due\u00f1o de ambos. A continuaci\u00f3n, establezcamos el bit setgid en padre usando chmod: root# chmod g+s padre root# ls -ld padre drwxrwsrwx 2 root raul 4096 Feb 3 00 :33 padre/ Ahora, vamos a crear un nuevo archivo y un subdirectorio bajo el padre con root: root# touch padre/nuevo_root root# mkdir padre/nuevo_dir_root ``` Luego, verificaremos los propietarios del grupo de todos los archivos y subdirectorios en padre: root# ls -l padre total 4 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 grp_exist_invitado1 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 grp_exist_invitado2 drwxr-sr-x 2 root raul 4096 Feb 3 00 :54 nuevo_dir_root/ -rw-r--r-- 1 root raul 0 Feb 3 00 :54 nuevo_arch_root En la salida anterior, vemos que los dos archivos existentes no han cambiado despu\u00e9s de que establecemos el bit setuid en padre. Sin embargo, el archivo y el subdirectorio reci\u00e9n creados son propiedad de raul en lugar de root , aunque root los cre\u00f3. Esto se debe a que el padre ten\u00eda establecido el bit setgid , y los archivos y directorios reci\u00e9n creados bajo \u00e9l heredaron el grupo del padre. Sticky bit La misi\u00f3n del sticky bit es proteger los archivos dentro de un directorio. Si configuramos el sticky bit en un directorio, un archivo en este directorio solo se puede eliminar mediante una de las siguientes opciones: El due\u00f1o del archivo El due\u00f1o del directorio El usuario root En otras palabras, este permiso especial evita que un usuario elimine los archivos de otros usuarios en un directorio p\u00fablico. Un ejemplo t\u00edpico de sticky bit del mundo real es el directorio /tmp: $ ls -ld /tmp drwxrwxrwt 24 root root 980 Feb 3 21 :41 /tmp/ Debido a la \"w\" en la secci\u00f3n de permisos \"otros\", sabemos que cualquier usuario puede crear y eliminar cualquier archivo en el directorio /tmp . Pero si leemos la salida de ls anterior con atenci\u00f3n, vemos que el bit de permiso de ejecuci\u00f3n en la secci\u00f3n \"otro\" es una \"t\" min\u00fascula, en lugar de la \"x\" habitual. Esta \"t\" en min\u00fascula indica que el directorio / tmp tiene el bit fijo establecido. Con el sticky bit, cualquier usuario a\u00fan puede crear archivos bajo /tmp. Sin embargo, un usuario solo puede eliminar archivos de su propiedad. El sticky bit en un directorio Para establecer el sticky bit en un directorio, a\u00fan podemos usar el comando chmod con el modo + t : chmod +t DIRECTORIO De otra forma, tambi\u00e9n podemos anteponer un \"1\" al modo de un directorio para establecer el sticky bit: chmod 1777 DIRECTORIO Tambi\u00e9n podemos eliminar el sticky bit de un directorio usando -t : chmod -t DIRECTORIO Como de costumbre, veamos un ejemplo para comprender c\u00f3mo el sticky bit puede proteger los archivos de un directorio y c\u00f3mo configurar y eliminar el sticky bit en un directorio. Comencemos por preparar un directorio p\u00fablico llamado p\u00fablico y permitir que todos los usuarios escriban en \u00e9l: $ ls -ld public drwxrwxrwx 2 root root 40 Feb 3 22 :22 public/ A continuaci\u00f3n, crearemos algunos archivos en p\u00fablico por diferentes usuarios: $ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo1_invitado -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Hasta ahora, no hemos colocado el sticky bit en ninguna parte. Veamos si el usuario raul puede eliminar un archivo propiedad de un invitado: raul$ rm archivo1_invitado rm: remove write-protected regular empty archivo 'archivo1_invitado' ? y raul$ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Entonces, sin el sticky bit, podemos eliminar archivos propiedad de otros usuarios. Ahora, configuremos el sticky bit y veamos si hay alg\u00fan cambio: root# chmod +t public root# ls -ld public drwxrwxrwt 2 root root 80 Feb 3 22 :33 public/ root# su raul raul$ rm archivo2_invitado rm: remove write-protected regular empty archivo 'archivo2_invitado' ? y rm: cannot remove 'archivo2_invitado' : Operation not permitted raul$ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Despu\u00e9s de configurar el sticky bit, los archivos en p\u00fablico solo pueden ser eliminados por los propietarios del archivo. Contrase\u00f1as en Linux En este apartado se describe c\u00f3mo se implementan las contrase\u00f1as dentro del sistema operativo Unix tanto para sistemas administrados localmente como basados \u200b\u200ben red. El archivo /etc/passwd Tradicionalmente, Unix usa el archivo /etc/passwd para realizar un seguimiento de cada usuario en el sistema. El archivo / etc / passwd contiene el nombre de usuario, el nombre real, la informaci\u00f3n de identificaci\u00f3n y la informaci\u00f3n b\u00e1sica de la cuenta de cada usuario. Cada l\u00ednea del archivo contiene un registro de base de datos; los campos de registro est\u00e1n separados por dos puntos (:). Puedes usar el gato comando para mostrar el archivo / etc / passwd de su sistema. Aqu\u00ed hay algunas l\u00edneas de muestra de un archivo t\u00edpico: root:x:0:1:System Operator:/:/bin/ksh daemon:x:1:1::/tmp: uucp:x:4:4::/var/spool/uucppublic:/usr/lib/uucp/uucico rocio:x:181:100:Rocio Cordoba:/home/rachel:/bin/ksh arturo:x.:182:100:Arturo Soria:/home/arlin:/bin/csh Las primeras tres cuentas, root , daemon y uucp , son cuentas del sistema, mientras que rachel y arlin son cuentas para usuarios individuales. Los campos individuales del archivo / etc / passwd tienen significados bastante sencillos. La Tabla 4-1 explica una l\u00ednea de muestra del archivo que se muestra arriba. Alguno de los campos m\u00e1s importantes del archivo /etc/passwd, son: Campo Contenido Raquel Nombre de usuario. x Lugar de espera para la \"contrase\u00f1a cifrada\" del usuario. Tradicionalmente, este campo almacenaba la contrase\u00f1a cifrada del usuario. Los sistemas Unix modernos almacenan contrase\u00f1as cifradas en un archivo separado (el archivo de contrase\u00f1as ocultas ) al que solo pueden acceder los usuarios privilegiados. 181 N\u00famero de identificaci\u00f3n de usuario (UID) del usuario. 100 N\u00famero de identificaci\u00f3n de grupo del usuario (GID). Rocio Cordoba Nombre completo del usuario /home/rocio Directorio de inicio del usuario. /bin/ksh Shell del usuario. Las contrase\u00f1as se almacenaban tradicionalmente en el archivo /etc/passwd en un formato cifrado. Sin embargo, debido a los avances en la velocidad del procesador, las contrase\u00f1as cifradas ahora se almacenan casi universalmente en un archivo independiente, llamado /etc/shadow , que se describe m\u00e1s adelante. El sistema de contrase\u00f1as cifradas en Unix/Linux Cuando Unix/Linux solicita su contrase\u00f1a, necesita alguna forma de determinar que la contrase\u00f1a es correcta. Muchos de los primeros sistemas inform\u00e1ticos almacenaban las contrase\u00f1as de todas sus cuentas en texto plano en un archivo. En circunstancias normales, el sistema proteg\u00eda las contrase\u00f1as de modo que solo los usuarios privilegiados y las utilidades del sistema operativo pudieran acceder a ellas. Sin embargo, bien por accidente, bien por un error de programaci\u00f3n o por un acto deliberado, un usuario no privilegiado podr\u00eda acceder al contenido de este archivo. Para muestra un bot\u00f3n: Una de las situaciones m\u00e1s memorables ocurri\u00f3 a principios de la d\u00e9cada de 1960 cuando un administrador del sistema en el sistema CTSS del MIT estaba editando el archivo de contrase\u00f1as y otro administrador del sistema estaba editando el mensaje diario que se imprime en el terminal de todos al iniciar sesi\u00f3n. Debido a un error de dise\u00f1o del software, los archivos temporales del editor de los dos usuarios se intercambiaron y, por lo tanto, durante un tiempo, el archivo de contrase\u00f1a se imprimi\u00f3 en cada terminal cuando se iniciaba sesi\u00f3n. El peligro real que planteaban estos sistemas es que los usuarios pueden hacer copias del archivo de contrase\u00f1as y robarlas sin el conocimiento del administrador del sistema. Unix/Linux evitan este problema al no mantener las contrase\u00f1as reales en ninguna parte del sistema. En su lugar, Unix/Linux almacenan un valor que es generado mediante el uso de la contrase\u00f1a para cifrar un bloque de bits con una funci\u00f3n unidireccional llamada crypt(); el resultado del c\u00e1lculo se almacenaba tradicionalmente en /etc/passwd. Cuando se intenta iniciar sesi\u00f3n, el programa /bin/login no descifra la contrase\u00f1a almacenada. En su lugar, /bin/login toma la contrase\u00f1a que ingres\u00f3, la usa para transformar otro bloque de ceros y compara el bloque reci\u00e9n transformado con el bloque almacenado en el archivo /etc/passwd. Si los dos resultados cirfrados coinciden, el sistema lo deja entrar. La funci\u00f3n de cifrado tradicional crypt() El algoritmo que usa crypt() tradicionalmente se basa en el Est\u00e1ndar de cifrado de datos (DES) del Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda (NIST). En funcionamiento normal, DES utiliza una clave de 56 bits (8 caracteres ASCII de 7 bits, por ejemplo) para cifrar bloques de texto original o texto sin cifrar, que resultaban tener 64 bits de longitud. Los bloques de 64 bits resultantes de texto cifrado o texto cifrado no se pueden descifrar f\u00e1cilmente al texto sin formato original sin conocer la clave original de 56 bits. Actualmente este algoritmo ha sido sustituido por unos mucho m\u00e1s seguros y robustos. Ech\u00e1ndole \"salt\" A medida que los ordenadores aumentaban de potencia y los algoritmos de cifrado fueron empezando a considerarse inseguros por ello, se inventaron nuevas formas de fortificarlos. Una de ellas fue el elemento conocido como \"salt\". En criptograf\u00eda, la sal (en ingl\u00e9s, salt) comprende bits aleatorios que se usan como una de las entradas en una funci\u00f3n derivadora de claves. La otra entrada es habitualmente una contrase\u00f1a. La salida de la funci\u00f3n derivadora de claves se almacena como la versi\u00f3n cifrada de la contrase\u00f1a. En definitiva, el salt es una cadena de caracteres aleatorios que se concatenan con la contrase\u00f1a antes de cifrarla para dificultad en gran medida su descifrado por un atacante. Los datos con sal complican los ataques de diccionario que cifran cada una de las entradas del mismo: cada bit de sal duplica la cantidad de almacenamiento y computaci\u00f3n requeridas. Para mayor seguridad, el valor de sal se guarda en secreto, separado de la base de datos de contrase\u00f1as. Esto aporta una gran ventaja cuando la base de datos es robada, pero la sal no. El beneficio aportado por usar una contrase\u00f1a con sal es que un ataque simple de diccionario contra los valores cifrados es impracticable si la sal es lo suficientemente larga. As\u00ed el formato del contenido del archivo /etc/shadow es: El campo a la derecha del nombre de usuario indica qu\u00e9 algoritmo se ha utilizado para cifrar la contrase\u00f1a junto con el salt del tercer campo. Por curiosidad, algunos de estos algorimos son: Valor Algoritmo $1$ MD5 $2a$ Blowfish $2y$ Blowfish $5$ SHA-256 $6$ SHA-512 Los signos del d\u00f3lar delimitan estos dos campos. Principales comandos para manejarse en el terminal Crear archivos y directorios A modo de tutorial, puede ser interesante seguir los comandos que aqu\u00ed se muestran. Para ello, en primer lugar vamos a crear un subdirectorio dentro del directorio /tmp y nos ubicaremos dentro de ese subdirectorio: mkdir /tmp/tutorial cd /tmp/tutorial El comando mkdir es una abreviatura de \"make directory\" y se utiliza para crear nuevos directorios vac\u00edos. Permite incluso crear varios directorios en un s\u00f3lo comando utilizando el n\u00famero de par\u00e1metros o argumentos adecuado: mkdir dir1 dir2 dir3 Si quisi\u00e9ramos listar los directorios creados, podr\u00edamos utilizar el comando para ello: ls Podr\u00edamos incluso darle una vuleta de tuerca al comando. Ya que los directorios que crea est\u00e1n vac\u00edos, pero si quisi\u00e9ramos crear una carpeta con subdirectorios en su interior utilizando un \u00fanico comando, har\u00edamos: mkdir -p dir4/dir5/dir6 ls El \"-p\" es lo que se conoce como un switch , que no son m\u00e1s que distintas opciones para modificar el comportamiento de un comando. Y podr\u00edamos movernos por los subdirectorios para comprobar que, efectivamente, se han creado: cd dir4 ls cd dir5 ls cd ../.. Ahora que ya sabemos c\u00f3mo crear varios directorios simplemente pas\u00e1ndolos como argumentos separados al mkdircomando. Pero supongamos que queremos crear un directorio con un espacio en el nombre. Vamos a intentarlo: mkdir otro directorio ls Pod\u00e9is intentar escribir esto en el terminal o, si s\u00f3is un poco suspicaces, os habr\u00e9is dado cuenta de lo que pasar\u00e1. Exactamente, se crearan dos directorios distintos. Si queremos trabajar con espacios en nombres de archivos o directorios, necesitamos \"escaparlos\" . \u00c9ste es un termino inform\u00e1tico que hace referencia a c\u00f3digos especiales para decirle a la m\u00e1quina que determinados caracteres y s\u00edmbolos los trate de forma diferente a lo normal. Como ejemplo: mkdir \"carpeta 1\" mkdir 'carpeta 2' mkdir carpeta \\ 3 mkdir \"carpeta 4\" \"carpeta 5\" mkdir -p \"carpeta 6\" / \"carpeta 7\" ls Todos estos comandos crear\u00e1n carpetas independientes y con espacios en los nombres. Debido a lo engorroso de tener que escapar este tipo de caracteres cada vez que se utilizan en el terminal, la tendencia es usar nombres sin espacios, sustituyendo estos por guiones (\"-\") o guiones bajos (\"_\") Creando archivos usando la redirecci\u00f3n Supongamos que quisi\u00e9ramos capturar la salida del comando \"ls\" como un archivo de texto que podemos manipular con posterioridad. Todo lo que tenemos que hacer es agregar el car\u00e1cter mayor que (\u201d>\u201d) al final de nuestra l\u00ednea de comando, seguido del nombre del archivo en el que escribir: ls > salida.txt No se imprimir\u00e1 nada por pantalla puesto que hemos redirigido la salida del comando al archivo salida.txt. En todo caso, podemos utilizar el comando \"cat\" para ver el contenido del archivo: cat output.txt Otro ejemplo de redirecci\u00f3n podr\u00edamos llevarlo a cabo utilizando el comando \"echo\", el cual simplemente imprime por pantalla los argumentos que recibe. Sin embargo, podr\u00edamos redirigir la salida a un archivo y crear ficheros nuevos: echo \"Esto es una prueba\" > test_1.txt echo \"Esto es otra prueba\" > test_2.txt echo \"Otra prueba m\u00e1s\" > test_3.txt ls Y para ver el contenido de los archivos podemos utilizar nuevamente \"cat\". Incluso podr\u00edamos pasarle el nombre de los 3 archivos simult\u00e1nemamente como argumentos: cat test_1.txt test_2.txt test_3.txt Cuando desee pasar varios nombres de archivo a un solo comando, existen algunos atajos \u00fatiles que pueden ahorrarle mucho escribir si los archivos tienen nombres similares. Se puede utilizar un signo de interrogaci\u00f3n (\"?\") Para indicar \"cualquier car\u00e1cter\" dentro del nombre del archivo. Se puede utilizar un asterisco (\u201d*\u201d) para indicar \u201ccero o m\u00e1s caracteres\u201d. A veces se los denomina caracteres \"comod\u00edn\". Un par de ejemplos pueden ayudar, los siguientes comandos hacen lo mismo: cat test_1.txt test_2.txt test_3.txt cat test_?.txt cat test_* Atenci\u00f3n Precisamente por las car\u00e1cteres comod\u00edn en los comandos, tampoco es recomendable usar signos de puntuaci\u00f3n en los nombres de los archivos, de otra forma habr\u00eda que \"escapar\" estos caracteres a la hora de trabajar en la l\u00ednea de comandos con los nombres de los archivos Observando la salida de ls , se puede ver que los \u00fanicos archivos o carpetas que comienzan por \"t\" son los tres archivos de prueba que acabamos de crear, por lo que incluso se podr\u00eda simplificar ese \u00faltimo comando a\u00fan m\u00e1s cat t* , lo que significa \"concatenar todos los archivos cuyos nombres comienzan con una t y van seguidos de cero o m\u00e1s caracteres \u201d. Usemos esta capacidad para unir todos nuestros archivos en un solo archivo nuevo y luego verlo: cat t* > combinado.txt cat combinado.txt Hay que tener cuidado puesto que la shell borra todo el contenido del archivo antes de escribir la salida del comando cat en \u00e9l. Debido a esto, debe tener mucha precauci\u00f3n al usar la redirecci\u00f3n para asegurarse de no sobrescribir accidentalmente un archivo que necesita. Si lo que queremos es a\u00f1adir al final del archivo en lugar de reemplazar el contenido del mismo, debemos poner un doble s\u00edmbolo de \"mayor que\": cat t* >> combinado.txt echo \"\u00a1He a\u00f1adido una l\u00ednea!\" >> combinado.txt cat combinado.txt Cuando el contenido del archivo es mayor de lo que se puede mostrar en la terminal, se necesita utilizar lo que se conoce como pager para que pagine la salida por el terminal. El pager m\u00e1s antiguo era more porque colocaba una l\u00ednea de texto que dec\u00eda \"--More--\" para indicar que a\u00fan hab\u00eda contenido por mostrar. Posteriormente surgi\u00f3 el pager less con el fin de reemplazar a more . less archivo_muy_largo.txt Al examinar un archivo utilizando less , se pueden utilizar las teclas de flecha arriba, flecha abajo, Re P\u00e1g, Av P\u00e1g, Inicio y Fin para desplazarse a trav\u00e9s del fichero. A prop\u00f3sito de las may\u00fasculas y min\u00fasculas Los sistemas Unix son \"case sensitive\", es decir, distinguen entre may\u00fasculas y min\u00fasculas, es decir, consideran que \u201cA.txt\u201d y \u201ca.txt\u201d son dos archivos diferentes. Ejecutando los siguientes comandos se terminar\u00eda con tres archivos distintos: echo \"Con minusculas\" > a.txt echo \"Con mayusculas\" > A.TXT echo \"Ambas mezcladas\" > A.txt Se debe tener precauci\u00f3n con esto puesto que Windows es \"case insensitive\" y no distinguir\u00eda entre esos tres archivos, los tratar\u00eda como uno solo. Buenas pr\u00e1cticas de nomenclatura Cuando se considera tanto la distinci\u00f3n entre may\u00fasculas y min\u00fasculas como el escape, una buena regla general es mantener los nombres de los archivos en min\u00fasculas, con solo letras, n\u00fameros, guiones bajos y guiones. Adem\u00e1s, aunque en linux los archivos no tienen extensi\u00f3n, se la pondremos con el fin de facilitar el trabajo. Moviendo y manipulando archivos Ahora que ya hemos aprendido a crear archivos, vemos que tareas comunes podemos realizar con ellos. Por ejemplo, si queremos mover nuestro archivo combinado.txt al directorio dir1 , usando el comando mv (move) : mv combinado.txt dir1 Para confirmar que el comando se ha ejecutado con \u00e9xito podemos utilizar el comando ls para ver que el fichero ya no est\u00e1 en el directorio de trabajo, luego con cd dir1 cambiar a ese directorio, hacer ls para ver que ahora el fichero est\u00e1 all\u00ed, y luego cd .. para movernos al directorio de trabajo nuevamente. O tambi\u00e9n podemos ahorrarnos la mayor parte de este trabajo de escritura pasando una ruta directamente al comando ls consultar directamente el contenido de ese directorio: ls dir1 Un poco de fontaner\u00eda (tuber\u00edas) La l\u00ednea de comandos y el superusuario Archivos ocultos","title":"Entornos Linux"},{"location":"section/EntLinux/#estructura-de-ficheros","text":"Un sistema de archivos, llamado com\u00fanmente File System o FS, determina la organizaci\u00f3n de los datos en un soporte de almacenamiento, y por tanto, c\u00f3mo gestiona y organiza el sistema operativo los archivos. Linux es, como todo Unix, un sistema operativo completamente orientado a archivos. Se representa todo (o casi todo) con un archivo, tanto los datos (archivos de datos de cualquier tipo, como una imagen o un programa) como los perif\u00e9ricos (terminales, ratones, teclado, tarjeta sonido, etc.) o incluso los medios de comunicaci\u00f3n (sockets, tuber\u00edas nombradas, etc.). Se puede decir que el sistema de archivos es el coraz\u00f3n de cualquier sistema Unix. Un archivo es una entidad que almacena datos y programas. Se compone de contenido y metadatos (tama\u00f1o del archivo, propietario, fecha de creaci\u00f3n, permisos). Los archivos est\u00e1n organizados en directorios. Un directorio es un archivo que almacena otros archivos. Los diferentes tipos de archivos incluyen: Archivos regulares que almacenan datos y programas. Directorios que contienen otros archivos. Archivos especiales que se utilizan para entrada y salida. Todo en Linux es un archivo , por lo que saber c\u00f3mo manipularlos es muy importante. As\u00ed pues, en la secci\u00f3n correspondiente, veremos las operaciones b\u00e1sicas con archivos mediante el terminal. La estructura de los directorios de Linux, as\u00ed como su contenido y funciones, viene definida en el denominado Filesystem Hierarchy Standard o FHS por sus siglas en ingl\u00e9s, que en otras palabras viene a ser el est\u00e1ndar de jerarqu\u00eda para los sistemas de archivos en sistemas Linux y otros derivados de UNIX. Como pod\u00e9is ver en la siguiente imagen, todo el \u00e1rbol de parte de una ra\u00edz com\u00fan denominada root y que se simboliza por una barra inclinada. A\u00fan as\u00ed, esto no significa que varios de ellos no puedan estar en particiones separadas del resto. De hecho, en muchas distros GNU/Linux es una pr\u00e1ctica muy com\u00fan el hecho ubicar ciertos directorios en particiones separadas del resto. La FHS distingue entre lo que ser\u00edan directorios est\u00e1ticos, que son aquellos que contienen binarios, bibliotecas, documentaci\u00f3n, etc., de los din\u00e1micos, que son aquellos que requieren de acciones m\u00e1s a menudo, tales como copias de seguridad, etc. Tambi\u00e9n podemos diferencias claramente lo que son los directorios compartibles, que significa que contienen ficheros que pueden utilizarse desde otros dispositivos, de los no compartibles, que solo pueden utilizarse desde el dispositivo en el que se encuentran.","title":"Estructura de ficheros"},{"location":"section/EntLinux/#directorio-raiz-o","text":"Toda la estructura de directorios en los sistemas basados en UNIX parte de un directorio ra\u00edz tambi\u00e9n llamado directorio root y que se simboliza por una barra inclinada o /. De este directorio, es desde donde nacen todo el resto de directorios, independientemente que est\u00e9n almacenados f\u00edsicamente en discos o unidades separadas. Cualquier direcci\u00f3n de archivo o carpeta en Linux empieza por el directorio ra\u00edz o /, seguido de todos los directorios y subdirectorios que que lo contienen, separados cada uno de ellos por /. A continuaci\u00f3n conocer\u00e1s con m\u00e1s en detalle a todos los directorios principales que parten del directorio ra\u00edz, junto con sus subdirectorios m\u00e1s importantes y los ficheros que suelen contener.","title":"Directorio ra\u00edz o \"/\""},{"location":"section/EntLinux/#directorios-bin-sbin","text":"El directorio /bin es un directorio est\u00e1tico y es donde se almacenan todos los binarios necesarios para garantizar las funciones b\u00e1sicas a nivel de usuario. Solo almacena los ejecutables de usuario, ya que los binarios necesarios para tareas administrativas gestionadas por el usuario root o superusuario del sistema se encuentran en el directorio /sbin. Incluye tambi\u00e9n los binarios que permiten la ejecuci\u00f3n de varias utilidades est\u00e1ndar de la terminal de Linux, concretamente cat, cd, cp, echo, grep, gzip, kill, ls, mv, rm, ping, su, ps, tar y vi. El directorio /sbin hace lo mismo pero para los binarios relativos tareas propias del sistema operativo, y que solamente pueden ser gestionadas por el usuario root, tales como el arranque, tareas de restauraci\u00f3n, reparaci\u00f3n, etc.","title":"Directorio/s bin, sbin"},{"location":"section/EntLinux/#directorio-boot","text":"Es un directorio est\u00e1tico y contiene los archivos necesarios para arrancar el sistema. Los archivos del cargador de arranque GRUB y los kernels de Linux se almacenan aqu\u00ed, por ejemplo. Sin embargo, los archivos de configuraci\u00f3n del cargador de arranque no se encuentran aqu\u00ed, est\u00e1n en / etc con los otros archivos de configuraci\u00f3n. A la hora de instalar el sistema es importante prever bien el espacio que se le vaya a dar a la partici\u00f3n, ya que a la larga, con la acumulaci\u00f3n de diferentes actualizaciones del Kernel, es com\u00fan que se quede sin espacio. Si esto sucede, se pueden tener problemas a la hora de instalar futuras actualizaciones del n\u00facleo, y ser\u00e1 necesario hacer limpieza de versiones antiguas del kernel.","title":"Directorio /boot"},{"location":"section/EntLinux/#directorio-dev","text":"Este directorio incluye todos los dispositivos de almacenamiento, en forma de archivos especiales, conectados al sistema. Es decir, cualquier disco duro, partici\u00f3n, memoria USB, o CDROM conectado al sistema y que el sistema pueda entender como un volumen l\u00f3gico de almacenamiento. Siendo esto as\u00ed, ver\u00e9is que la ruta en la que se encuentra cualquier volumen (partici\u00f3n o dispositivo externo) conectado al sistema siempre empieza por /dev. Este es el directorio que contiene, por decirlo de alg\u00fan modo, la informaci\u00f3n de cada uno de los vol\u00famenes, a diferencia del directorio /media , que veremos m\u00e1s adelante, que lo que contiene son solo los puntos de montaje, pero no la informaci\u00f3n real de estos vol\u00famenes. Para ver esto en la pr\u00e1ctica, si abres una ventana de terminal y ejecutas el comando sudo fdisk -l , ver\u00e1s la estructura de particiones de tu sistema. En una instalaci\u00f3n t\u00edpica de cualquier distro GNU/Linux suele ser la siguiente: /dev/sda1 - Partici\u00f3n principal /dev/sda2 - Partici\u00f3n extendida /dev/sda5 - Partici\u00f3n Swap Estos no son archivos reales como los conocemos, pero aparecen como archivos; por ejemplo, /dev/sda representa la primera unidad SATA del sistema. Eso en cuanto a particiones. Si se trata de un dispositivo externo, el volumen estar\u00e1 igualmente dentro de /dev, pero en este caso var\u00eda el nombre que el sistema le asigna a dicho volumen. Generalmente la estructura suele ser la siguiente (ejecutando nuevamente el comando sudo fdisk -l con un dispositivo externo conectado puede comprobarse). /dev/sdb1 /dev/sdb2 /dev/sdb3 ... Este directorio tambi\u00e9n contiene pseudodispositivos, que son dispositivos virtuales que en realidad no se corresponden con el hardware. Por ejemplo, /dev/random produce n\u00fameros aleatorios. Otro ejemplo ser\u00eda el de /dev/null , un dispositivo especial que no produce salida y descarta autom\u00e1ticamente todas las entradas; cuando canaliza la salida de un comando a /dev/null , la descarta.","title":"Directorio /dev"},{"location":"section/EntLinux/#directorio-etc","text":"El directorio /etc contiene archivos de configuraci\u00f3n, que generalmente se pueden editar a mano en un editor de texto. Se debe tener en cuenta que el directorio /etc contiene archivos de configuraci\u00f3n de todo el sistema, adem\u00e1s de las aplicaciones y programas instaladas posteriormente; los archivos de configuraci\u00f3n espec\u00edficos del usuario se encuentran en el directorio de inicio de cada usuario. Es un directorio que deber\u00eda contener \u00fanicamente ficheros de configuraci\u00f3n, y no deber\u00eda contener binarios.","title":"Directorio /etc"},{"location":"section/EntLinux/#directorio-lib","text":"Incluye las bibliotecas esenciales que son necesarias para que se puedan ejecutar correctamente todos los binarios que se encuentran en los directorios /bin y /sbin , as\u00ed como los m\u00f3dulos del propio kernel. En los sistemas operativos de 64 bits, adem\u00e1s de /lib existe otro directorio denominado /lib64 , referida a las bibliotecas para aplicaciones de 64 bits.","title":"Directorio lib"},{"location":"section/EntLinux/#directorio-media","text":"Representa el punto de montaje de todos los vol\u00famenes l\u00f3gicos que se montan temporalmente. Es decir, El directorio /media contiene subdirectorios donde se montan los dispositivos de medios extra\u00edbles insertados en el ordenador. En la mayor\u00eda de distribuciones GNU/Linux, desde hace ya alg\u00fan tiempo, cada vez que se monta una unidad externa, partici\u00f3n, etc., esta se monta dentro del directorio /media y a su vez dentro de un directorio especifico dependiendo del usuario del sistema que monta el volumen. De este modo, si en un sistema hay varios usuarios, pongamos User1 y User2, los puntos de montaje de los vol\u00famenes que montan cada uno de ellos se mostraran en directorios separados tal como as\u00ed: /media/User1 /media/User2","title":"Directorio media"},{"location":"section/EntLinux/#directorio-opt","text":"El directorio /opt contiene subdirectorios para paquetes de software opcionales. Es com\u00fanmente utilizado por software propietario que no obedece a la jerarqu\u00eda del sistema de archivos est\u00e1ndar; por ejemplo, un programa propietario puede volcar sus archivos en /opt/ NombreAplicacion cuando se instala. Antiguamente se sol\u00eda utilizar el directorio mnt para estas funciones, pero actualmente, la mayor\u00eda de distribuciones hacen uso de media.","title":"Directorio opt"},{"location":"section/EntLinux/#directorio-proc","text":"Este directorio contiene informaci\u00f3n de los procesos y aplicaciones que se est\u00e1n ejecutando en un momento determinado en el sistema, pero realmente no guarda nada como tal, ya que lo que almacena son archivos virtuales, por lo que el contenido de este directorio es nulo.","title":"Directorio proc"},{"location":"section/EntLinux/#directorio-root","text":"El directorio /root es el directorio de inicio del usuario root. En lugar de estar ubicado en /home/root , est\u00e1 ubicado en /root . Es distinto de / , que es el directorio ra\u00edz del sistema.","title":"Directorio /root"},{"location":"section/EntLinux/#directorio-tmp","text":"Las aplicaciones almacenan archivos temporales en el directorio /tmp . Estos archivos generalmente se eliminan cada vez que se reinicia su sistema y pueden ser eliminados en cualquier momento por utilidades como tmpwatch. Las aplicaciones programadas para almacenar archivos en este directorio deben asumir que solo ser\u00e1n recuperables en la sesi\u00f3n actual. En este sentido, hay otro subdirectorio, /var/tmp , dispuesto igualmente para el almacenamiento de archivos temporales, pero cuyo contenido no se borra de forma autom\u00e1tica tras el reinicio del sistema.","title":"Directorio tmp"},{"location":"section/EntLinux/#directorio-usr","text":"El directorio /usr contiene aplicaciones y archivos utilizados por los usuarios, a diferencia de las aplicaciones y archivos utilizados por el sistema, incluyendo todo el software instalado a trav\u00e9s de los gestores de paquetes de cada distribuci\u00f3n. Por ejemplo, las aplicaciones no esenciales se encuentran dentro del directorio /usr/bin en lugar del directorio /bin y los binarios de administraci\u00f3n del sistema no esenciales se encuentran en el directorio /usr/sbin en lugar del directorio /sbin . Las bibliotecas para cada uno se encuentran dentro del directorio /usr/lib . El directorio /usr tambi\u00e9n contiene otros directorios; por ejemplo, los archivos independientes de la arquitectura, como los gr\u00e1ficos, se encuentran en /usr/share : /usr/bin /usr/include /usr/lib /usr/local /usr/sbin /usr/share /usr/src El directorio /usr/local es donde se instalan las aplicaciones compiladas localmente de forma predeterminada; esto evita que arruinen el resto del sistema","title":"Directorio usr"},{"location":"section/EntLinux/#directorio-var","text":"Este directorio contiene varios archivos con informaci\u00f3n del sistema, como archivos de logs, emails de los usuarios del sistema, bases de datos, informaci\u00f3n almacenada en la cach\u00e9 o informaci\u00f3n relativa a los paquetes de aplicaciones almacenados en /opt . En cierto modo se podr\u00eda decir que act\u00faa a modo de registro del sistema. Podr\u00eda decirse que el directorio /var es la contraparte \"escriturable\" del directorio /usr , que debe ser de solo lectura en el funcionamiento normal. Los archivos de registro y todo lo dem\u00e1s que normalmente se escribir\u00eda en /usr durante el funcionamiento normal se escriben en el directorio /var .","title":"Directorio var"},{"location":"section/EntLinux/#directorio-home","text":"El directorio /home contiene una carpeta de inicio para cada usuario. Por ejemplo, si el nombre de usuario es raul, habr\u00e1 una carpeta de inicio ubicada en /home/raul . Esta carpeta de inicio contiene los archivos de datos del usuario y los archivos de configuraci\u00f3n espec\u00edficos del usuario (configuraciones de programas, por ejemplo). Cada usuario solo tiene acceso de escritura \u00fanicamente a su propia carpeta de inicio y debe convertirse en root para poder tener privilegios que le permitan modificar otros archivos en el sistema. Para visualizar los ficheros ocultos dentro del directorio individual de cada usuario, se puede usar la combinaci\u00f3n de comandos CTRL + H en modo gr\u00e1fico. Todos los archivos y carpetas ocultas en Linux empiezan por un punto, seguido del nombre. En muchas distribuciones es una pr\u00e1ctica recomendada el hecho de ubicar el directorio /home es una partici\u00f3n separada del resto, por tal de facilitar que, en caso de reinstalar el sistema operativo, puedas mantener intacta la partici\u00f3n de la /home , y de este modo mantener todos los archivos personales.","title":"Directorio home"},{"location":"section/EntLinux/#usuarios-y-grupos","text":"Un usuario es cualquiera que use un ordenador. En este caso, estamos describiendo los nombres que representan a esos usuarios. Puede ser Pol o Mart\u00ed, y pueden usar los nombres superc0der o Pirate en lugar de su nombre real. Lo \u00fanico que importa es que la computadora tenga un nombre para cada cuenta que cree, y es este nombre por el que una persona obtiene acceso para usar la computadora. Algunos servicios del sistema tambi\u00e9n se ejecutan utilizando cuentas de usuario restringidas o privilegiadas. La administraci\u00f3n de los usuarios se realiza con fines de seguridad al limitar el acceso de ciertas maneras espec\u00edficas. El superusuario (root) tiene acceso completo al sistema operativo y su configuraci\u00f3n; est\u00e1 destinado solo para uso administrativo. Los usuarios sin privilegios pueden usar los programas su y sudo para la escalada de privilegios controlada. Cualquier persona puede tener m\u00e1s de una cuenta, siempre que utilicen un nombre diferente para cada una de ellas. Adem\u00e1s, hay algunos nombres reservados que no se pueden usar, como \u00abroot\u00bb. Los usuarios pueden aglutinarse en un \u00abgrupo\u00bb y, del mismo modo, pueden a\u00f1adirse a un grupo existente para utilizar el acceso privilegiado que dicho grupo concede. Los grupos de usuarios juegan un papel esencial en los sistemas Linux. Gracias a ellos tenemos una manera muy f\u00e1cil de seleccionar grupos de usuarios a los que se les permite compartir archivos entre ellos. Tambi\u00e9n proporcionan a los administradores de sistemas una manera m\u00e1s efectiva y sencilla de gestionar los privilegios de los usuarios puesto que permiten asignar privilegios a grupos completos en lugar de a usuarios individuales.","title":"Usuarios y grupos"},{"location":"section/EntLinux/#permisos","text":"Aunque hay multitud de caracter\u00edsticas de seguridad integradas en los sistemas basados \u200b\u200ben Linux, puede existir una vulnerabilidad potencial muy importante cuando se otorga el acceso al sistema a los usuarios. Pueden aparecer problemas cuando no se han asignado los permisos adecuados a los archivos y directorios.","title":"Permisos"},{"location":"section/EntLinux/#grupos-de-permisos","text":"Cada archivo y directorio tiene tres grupos de permisos basados \u200b\u200ben usuarios: Propietario: los permisos de propietario se aplican solo al propietario del archivo o directorio, no afectar\u00e1n las acciones de otros usuarios. Grupo: los permisos de grupo se aplican solo al grupo que se ha asignado al archivo o directorio, no afectar\u00e1n las acciones de otros usuarios. Todos los usuarios: los permisos de todos los usuarios se aplican a todos los dem\u00e1s usuarios del sistema; este es el grupo de permisos que m\u00e1s desea ver.","title":"Grupos de permisos"},{"location":"section/EntLinux/#tipos-de-permisos","text":"Cada archivo o directorio tiene tres tipos de permisos b\u00e1sicos: Lectura (read/r): el permiso de lectura se refiere a la capacidad de un usuario para leer el contenido del archivo. El permiso de lectura en un directorio permite listar su contenido. Escritura (write/w): los permisos de escritura se refieren a la capacidad de un usuario para escribir o modificar un archivo. En un directorio permite crear, eliminar o modificar el nombre de un archivo. En un hipot\u00e9tico caso donde tuvi\u00e9ramos permiso de escritura en un archivo pero no en el directorio en el que est\u00e1 ubicado, podr\u00edamos modificar el contenido del archivo pero no su nombre, ni moverlo de sitio, ni eliminarlo del directorio. Ejecuci\u00f3n (execution/x): el permiso de ejecuci\u00f3n afecta la capacidad de un usuario para ejecutar un archivo o ver el contenido de un directorio. Tip Podemos inspeccionar con detalle los permisos de arhivos y directorios con el comando: ls -l","title":"Tipos de permisos"},{"location":"section/EntLinux/#como-se-cambian-los-permisos-en-linux","text":"Para cambiar los permisos de archivos y directorios en GNU/Linux, disponemos de 3 comandos principales: chmod: cambiar permisos del archivo o directorio: chmod [ permisos ][ archivo/directorio ][ opciones ] chown: cambiar el propietario del archivo o directorio: chown [ nuevo usuario propietario ][ archivo/directorio ][ opciones ] chgrp: cambiar el grupo del archivo o directorio: chgrp [ nuevo grupo ][ archivo/directorio ][ opciones ] Existen dos formas de cambiar los permisos de archivos y directorios en Linux: Modo simb\u00f3lico: con notaci\u00f3n basada en caracteres Modo absoluto: con notaci\u00f3n num\u00e9rica, seg\u00fan el sistema octal o en base 8 , cuyos valores de forma resumida puedne verse en la imagen a continuaci\u00f3n: As\u00ed pues, una tabla resumen en cu\u00e1nto a los permisos vistos, ser\u00eda la siguiente: Valor Permisos Descripci\u00f3n 0 --- Sin permisos 1 --x Ejecuci\u00f3n 2 -w- Lectura 3 -wx Lectura + ejecuci\u00f3n 4 r-- Lectura 5 r-x Lectura + ejecuci\u00f3n 6 rw- Lectura + escritura 7 rwx Lectura + escritura + ejecuci\u00f3n Los permisos utilizando la notaci\u00f3n num\u00e9rica en sistema octal, se asignan en tuplas de 3 (usuario/grupo/otros) y no es posible asignar s\u00f3lo para uno o dos de los elementos de la tupla. Algunos ejemplos de permisos en modo absoluto son: Notaci\u00f3n Significado rw------- (600) Permisos de lectura y escritura s\u00f3lo para el propietario rw-r--r-- (644) Permisos de lectura y escritura s\u00f3lo para el propietario y s\u00f3lo de lectura para el grupo y resto de usuarios rwxr-xr-x (755) Permisos de lectura, escritura y ejecuci\u00f3n para el usuario y de lectura y ejecuci\u00f3n para el grupo y resto de usuarios rwxrwxrwx (777) Usuario, grupo y resto de usuarios tienen todos los permisos sobre el fichero o directorio (\u00a1Cuidado!) rw-rw-rw- (666) Usuario, grupo y resto de usuarios pueden leer y escribir sobre el fichero o directorio(\u00a1cuidado!) Como ya hemos dicho es el comando chmod el utilizado en el terminal para cambiar los permisos de los usuarios. Puede usarse tanto con el modo absoluto como con el simb\u00f3lico. Un ejemplo para el formato absoluto ser\u00eda: chmod 600 archivo/directorio Y para el formato con caracteres chmod ugo+rw archivo/directorio Donde, en este \u00faltimo caso, los permisos rwx (lectura/escritura/ejecuci\u00f3n) pueden asignarse a: u - propietario g - grupo o - otros a - todos los usuarios Si utilizamos el operador + estaremos agregando permisos, si usamos el - los eliminaremos: chmod a-rw archivo1 chmod u+rwx archivo2 Ejemplos pr\u00e1cticos del uso de chmod para cambiar permisos de un archivo. Podemos utilizar tanto la forma absoluta, como la simb\u00f3lica: Modo absoluto Modo simb\u00f3lico Resultado chmod 700 archivo.gpg chmod u+rwx -rwx------ chmod 555 chmod ugo+rx -r-xr-xr-x chmod 666 -chmod ugo+rw rw-rw-rw-","title":"\u00bfC\u00f3mo se cambian los permisos en Linux?"},{"location":"section/EntLinux/#permisos-avanzados","text":"En GNU/Linux, adem\u00e1s de los 3 que hemos visto anteriormente, todav\u00eda existen otros tres permisos especiales adicionales que veremos a continuaci\u00f3n.","title":"Permisos avanzados"},{"location":"section/EntLinux/#bit-setuid","text":"En Linux, de forma predeterminada, cuando un usuario ejecuta un archivo, el archivo se inicia con los privilegios del usuario que lo ejecuta. Sin embargo, este comportamiento se puede cambiar si establecemos permisos especiales en archivos ejecutables. Setuid significa \"establecer ID de usuario\". Si configuramos el bit setuid en un archivo ejecutable, el archivo siempre se ejecuta con los privilegios del propietario del archivo, sin importar qui\u00e9n lo inicie. El bit setuid solo tiene sentido si est\u00e1 configurado en archivos ejecutables. No hay ning\u00fan significado pr\u00e1ctico si configuramos el bit setuid en un archivo o directorio no ejecutable. El comando passwd es un ejemplo con este bit especial aplicado: $ ls -l /bin/passwd -rwsr-xr-x 1 root root 63624 Dec 15 21 :06 /bin/passwd Observamos que el permiso de ejecuci\u00f3n para el propietario es una \"s\" min\u00fascula en lugar de la \"x\" habitual. Esta \"s\" indica que el archivo tiene el bit setuid establecido. El comando passwd siempre se ejecutar\u00e1 con privilegios de root sin importar qui\u00e9n lo inicie porque el propietario del archivo es root. Como ya sabemos, podemos usar el comando chmod para establecer el bit setuid en un archivo: chmod u+x archivo S\u00f3lo el propietario el archivo o el usuario o el usuario root puede establecer el bit setuid Un ejemplo pr\u00e1ctico de c\u00f3mo configurar este bit setuid en un archivo, de forma simb\u00f3lica: $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo $ chmod u+s archivo $ ls -l archivo -rwsr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo En el modo absoluto, anteponemos un 4 a los permisos para indicar este bit: $ chmod 4755 archivo -rwsr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo Y para quitar este bit, en ambos modos: $ chmod u-s archivo $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo y $ chmod 0755 archivo $ ls -l archivo -rwxr-xr-x 1 raul raul 0 Feb 2 12 :22 archivo Riesgo de seguridad El bit setuid podr\u00eda ser bastante \u00fatil en varias aplicaciones. Sin embargo, debemos tener cuidado al establecer esos permisos especiales, ya que pueden crear problemas de seguridad. Por ejemplo, un usuario normal puede obtener privilegios de superusuario ejecutando un programa que establece el UID como root y realizar una escalada de privilegios.","title":"Bit setuid"},{"location":"section/EntLinux/#bit-setgid","text":"","title":"Bit setgid"},{"location":"section/EntLinux/#bit-setgid-en-un-archivo","text":"setgid es la abreviatura de \"set group id\". Si configuramos el bit setgid en un archivo ejecutable, no importa qui\u00e9n inicie el archivo, se ejecuta con los privilegios del grupo propietario. El comando de localizaci\u00f3n es un ejemplo de un archivo con el conjunto de bits setgid : $ ls -l /usr/bin/locate -rwxr-sr-x 1 root locate 43048 Nov 13 18 :09 /usr/bin/locate Similar al bit setuid , notamos una \"s\" min\u00fascula en la salida de ls , excepto que est\u00e1 en la secci\u00f3n de grupo en lugar de en la secci\u00f3n de propietario. Para establecer este bit de modo simb\u00f3lico podemos utilizar: $ ls -l archivo2 -rwxr-xr-x 1 raul raul 0 Feb 2 22 :35 archivo2 $ chmod g+s archivo2 $ ls -l archivo2 -rwxr-sr-x 1 raul raul 0 Feb 2 22 :35 archivo2 Y de modo absoluto, anteponiendo un dos a los permisos: chmod 2755 archivo2","title":"Bit setgid en un archivo"},{"location":"section/EntLinux/#bit-setgid-en-un-directorio","text":"Si configuramos el bit setgid en un directorio, todos los archivos y subdirectorios reci\u00e9n creados en el directorio heredar\u00e1n el grupo de ese directorio. Sin embargo, los archivos y directorios existentes no aplicar\u00e1n el cambio de grupo. Veamos un ejemplo para aclarar este comportamiento. Primero, preparamos un directorio padre que contiene dos archivos: $ ls -ld padre drwxrwxrwx 2 root raul 4096 Feb 3 00 :33 padre/ $ ls -l padre total 2 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 existing_grp_invitado1 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 existing_grp_invitado2 padre es propiedad del usuario root y del grupo raul. Contiene dos archivos e invitado es due\u00f1o de ambos. A continuaci\u00f3n, establezcamos el bit setgid en padre usando chmod: root# chmod g+s padre root# ls -ld padre drwxrwsrwx 2 root raul 4096 Feb 3 00 :33 padre/ Ahora, vamos a crear un nuevo archivo y un subdirectorio bajo el padre con root: root# touch padre/nuevo_root root# mkdir padre/nuevo_dir_root ``` Luego, verificaremos los propietarios del grupo de todos los archivos y subdirectorios en padre: root# ls -l padre total 4 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 grp_exist_invitado1 -rwxr-xr-x 1 invitado invitado 0 Feb 3 00 :30 grp_exist_invitado2 drwxr-sr-x 2 root raul 4096 Feb 3 00 :54 nuevo_dir_root/ -rw-r--r-- 1 root raul 0 Feb 3 00 :54 nuevo_arch_root En la salida anterior, vemos que los dos archivos existentes no han cambiado despu\u00e9s de que establecemos el bit setuid en padre. Sin embargo, el archivo y el subdirectorio reci\u00e9n creados son propiedad de raul en lugar de root , aunque root los cre\u00f3. Esto se debe a que el padre ten\u00eda establecido el bit setgid , y los archivos y directorios reci\u00e9n creados bajo \u00e9l heredaron el grupo del padre.","title":"Bit setgid en un directorio"},{"location":"section/EntLinux/#sticky-bit","text":"La misi\u00f3n del sticky bit es proteger los archivos dentro de un directorio. Si configuramos el sticky bit en un directorio, un archivo en este directorio solo se puede eliminar mediante una de las siguientes opciones: El due\u00f1o del archivo El due\u00f1o del directorio El usuario root En otras palabras, este permiso especial evita que un usuario elimine los archivos de otros usuarios en un directorio p\u00fablico. Un ejemplo t\u00edpico de sticky bit del mundo real es el directorio /tmp: $ ls -ld /tmp drwxrwxrwt 24 root root 980 Feb 3 21 :41 /tmp/ Debido a la \"w\" en la secci\u00f3n de permisos \"otros\", sabemos que cualquier usuario puede crear y eliminar cualquier archivo en el directorio /tmp . Pero si leemos la salida de ls anterior con atenci\u00f3n, vemos que el bit de permiso de ejecuci\u00f3n en la secci\u00f3n \"otro\" es una \"t\" min\u00fascula, en lugar de la \"x\" habitual. Esta \"t\" en min\u00fascula indica que el directorio / tmp tiene el bit fijo establecido. Con el sticky bit, cualquier usuario a\u00fan puede crear archivos bajo /tmp. Sin embargo, un usuario solo puede eliminar archivos de su propiedad.","title":"Sticky bit"},{"location":"section/EntLinux/#el-sticky-bit-en-un-directorio","text":"Para establecer el sticky bit en un directorio, a\u00fan podemos usar el comando chmod con el modo + t : chmod +t DIRECTORIO De otra forma, tambi\u00e9n podemos anteponer un \"1\" al modo de un directorio para establecer el sticky bit: chmod 1777 DIRECTORIO Tambi\u00e9n podemos eliminar el sticky bit de un directorio usando -t : chmod -t DIRECTORIO Como de costumbre, veamos un ejemplo para comprender c\u00f3mo el sticky bit puede proteger los archivos de un directorio y c\u00f3mo configurar y eliminar el sticky bit en un directorio. Comencemos por preparar un directorio p\u00fablico llamado p\u00fablico y permitir que todos los usuarios escriban en \u00e9l: $ ls -ld public drwxrwxrwx 2 root root 40 Feb 3 22 :22 public/ A continuaci\u00f3n, crearemos algunos archivos en p\u00fablico por diferentes usuarios: $ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo1_invitado -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Hasta ahora, no hemos colocado el sticky bit en ninguna parte. Veamos si el usuario raul puede eliminar un archivo propiedad de un invitado: raul$ rm archivo1_invitado rm: remove write-protected regular empty archivo 'archivo1_invitado' ? y raul$ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Entonces, sin el sticky bit, podemos eliminar archivos propiedad de otros usuarios. Ahora, configuremos el sticky bit y veamos si hay alg\u00fan cambio: root# chmod +t public root# ls -ld public drwxrwxrwt 2 root root 80 Feb 3 22 :33 public/ root# su raul raul$ rm archivo2_invitado rm: remove write-protected regular empty archivo 'archivo2_invitado' ? y rm: cannot remove 'archivo2_invitado' : Operation not permitted raul$ ls -l -rw-r--r-- 1 invitado invitado 0 Feb 3 22 :28 archivo2_invitado -rw-r--r-- 1 raul raul 0 Feb 3 22 :28 archivo_raul Despu\u00e9s de configurar el sticky bit, los archivos en p\u00fablico solo pueden ser eliminados por los propietarios del archivo.","title":"El sticky bit en un directorio"},{"location":"section/EntLinux/#contrasenas-en-linux","text":"En este apartado se describe c\u00f3mo se implementan las contrase\u00f1as dentro del sistema operativo Unix tanto para sistemas administrados localmente como basados \u200b\u200ben red.","title":"Contrase\u00f1as en Linux"},{"location":"section/EntLinux/#el-archivo-etcpasswd","text":"Tradicionalmente, Unix usa el archivo /etc/passwd para realizar un seguimiento de cada usuario en el sistema. El archivo / etc / passwd contiene el nombre de usuario, el nombre real, la informaci\u00f3n de identificaci\u00f3n y la informaci\u00f3n b\u00e1sica de la cuenta de cada usuario. Cada l\u00ednea del archivo contiene un registro de base de datos; los campos de registro est\u00e1n separados por dos puntos (:). Puedes usar el gato comando para mostrar el archivo / etc / passwd de su sistema. Aqu\u00ed hay algunas l\u00edneas de muestra de un archivo t\u00edpico: root:x:0:1:System Operator:/:/bin/ksh daemon:x:1:1::/tmp: uucp:x:4:4::/var/spool/uucppublic:/usr/lib/uucp/uucico rocio:x:181:100:Rocio Cordoba:/home/rachel:/bin/ksh arturo:x.:182:100:Arturo Soria:/home/arlin:/bin/csh Las primeras tres cuentas, root , daemon y uucp , son cuentas del sistema, mientras que rachel y arlin son cuentas para usuarios individuales. Los campos individuales del archivo / etc / passwd tienen significados bastante sencillos. La Tabla 4-1 explica una l\u00ednea de muestra del archivo que se muestra arriba. Alguno de los campos m\u00e1s importantes del archivo /etc/passwd, son: Campo Contenido Raquel Nombre de usuario. x Lugar de espera para la \"contrase\u00f1a cifrada\" del usuario. Tradicionalmente, este campo almacenaba la contrase\u00f1a cifrada del usuario. Los sistemas Unix modernos almacenan contrase\u00f1as cifradas en un archivo separado (el archivo de contrase\u00f1as ocultas ) al que solo pueden acceder los usuarios privilegiados. 181 N\u00famero de identificaci\u00f3n de usuario (UID) del usuario. 100 N\u00famero de identificaci\u00f3n de grupo del usuario (GID). Rocio Cordoba Nombre completo del usuario /home/rocio Directorio de inicio del usuario. /bin/ksh Shell del usuario. Las contrase\u00f1as se almacenaban tradicionalmente en el archivo /etc/passwd en un formato cifrado. Sin embargo, debido a los avances en la velocidad del procesador, las contrase\u00f1as cifradas ahora se almacenan casi universalmente en un archivo independiente, llamado /etc/shadow , que se describe m\u00e1s adelante.","title":"El archivo /etc/passwd"},{"location":"section/EntLinux/#el-sistema-de-contrasenas-cifradas-en-unixlinux","text":"Cuando Unix/Linux solicita su contrase\u00f1a, necesita alguna forma de determinar que la contrase\u00f1a es correcta. Muchos de los primeros sistemas inform\u00e1ticos almacenaban las contrase\u00f1as de todas sus cuentas en texto plano en un archivo. En circunstancias normales, el sistema proteg\u00eda las contrase\u00f1as de modo que solo los usuarios privilegiados y las utilidades del sistema operativo pudieran acceder a ellas. Sin embargo, bien por accidente, bien por un error de programaci\u00f3n o por un acto deliberado, un usuario no privilegiado podr\u00eda acceder al contenido de este archivo. Para muestra un bot\u00f3n: Una de las situaciones m\u00e1s memorables ocurri\u00f3 a principios de la d\u00e9cada de 1960 cuando un administrador del sistema en el sistema CTSS del MIT estaba editando el archivo de contrase\u00f1as y otro administrador del sistema estaba editando el mensaje diario que se imprime en el terminal de todos al iniciar sesi\u00f3n. Debido a un error de dise\u00f1o del software, los archivos temporales del editor de los dos usuarios se intercambiaron y, por lo tanto, durante un tiempo, el archivo de contrase\u00f1a se imprimi\u00f3 en cada terminal cuando se iniciaba sesi\u00f3n. El peligro real que planteaban estos sistemas es que los usuarios pueden hacer copias del archivo de contrase\u00f1as y robarlas sin el conocimiento del administrador del sistema. Unix/Linux evitan este problema al no mantener las contrase\u00f1as reales en ninguna parte del sistema. En su lugar, Unix/Linux almacenan un valor que es generado mediante el uso de la contrase\u00f1a para cifrar un bloque de bits con una funci\u00f3n unidireccional llamada crypt(); el resultado del c\u00e1lculo se almacenaba tradicionalmente en /etc/passwd. Cuando se intenta iniciar sesi\u00f3n, el programa /bin/login no descifra la contrase\u00f1a almacenada. En su lugar, /bin/login toma la contrase\u00f1a que ingres\u00f3, la usa para transformar otro bloque de ceros y compara el bloque reci\u00e9n transformado con el bloque almacenado en el archivo /etc/passwd. Si los dos resultados cirfrados coinciden, el sistema lo deja entrar.","title":"El sistema de contrase\u00f1as cifradas en Unix/Linux"},{"location":"section/EntLinux/#la-funcion-de-cifrado-tradicional-crypt","text":"El algoritmo que usa crypt() tradicionalmente se basa en el Est\u00e1ndar de cifrado de datos (DES) del Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda (NIST). En funcionamiento normal, DES utiliza una clave de 56 bits (8 caracteres ASCII de 7 bits, por ejemplo) para cifrar bloques de texto original o texto sin cifrar, que resultaban tener 64 bits de longitud. Los bloques de 64 bits resultantes de texto cifrado o texto cifrado no se pueden descifrar f\u00e1cilmente al texto sin formato original sin conocer la clave original de 56 bits. Actualmente este algoritmo ha sido sustituido por unos mucho m\u00e1s seguros y robustos.","title":"La funci\u00f3n de cifrado tradicional crypt()"},{"location":"section/EntLinux/#echandole-salt","text":"A medida que los ordenadores aumentaban de potencia y los algoritmos de cifrado fueron empezando a considerarse inseguros por ello, se inventaron nuevas formas de fortificarlos. Una de ellas fue el elemento conocido como \"salt\". En criptograf\u00eda, la sal (en ingl\u00e9s, salt) comprende bits aleatorios que se usan como una de las entradas en una funci\u00f3n derivadora de claves. La otra entrada es habitualmente una contrase\u00f1a. La salida de la funci\u00f3n derivadora de claves se almacena como la versi\u00f3n cifrada de la contrase\u00f1a. En definitiva, el salt es una cadena de caracteres aleatorios que se concatenan con la contrase\u00f1a antes de cifrarla para dificultad en gran medida su descifrado por un atacante. Los datos con sal complican los ataques de diccionario que cifran cada una de las entradas del mismo: cada bit de sal duplica la cantidad de almacenamiento y computaci\u00f3n requeridas. Para mayor seguridad, el valor de sal se guarda en secreto, separado de la base de datos de contrase\u00f1as. Esto aporta una gran ventaja cuando la base de datos es robada, pero la sal no. El beneficio aportado por usar una contrase\u00f1a con sal es que un ataque simple de diccionario contra los valores cifrados es impracticable si la sal es lo suficientemente larga. As\u00ed el formato del contenido del archivo /etc/shadow es: El campo a la derecha del nombre de usuario indica qu\u00e9 algoritmo se ha utilizado para cifrar la contrase\u00f1a junto con el salt del tercer campo. Por curiosidad, algunos de estos algorimos son: Valor Algoritmo $1$ MD5 $2a$ Blowfish $2y$ Blowfish $5$ SHA-256 $6$ SHA-512 Los signos del d\u00f3lar delimitan estos dos campos.","title":"Ech\u00e1ndole \"salt\""},{"location":"section/EntLinux/#principales-comandos-para-manejarse-en-el-terminal","text":"","title":"Principales comandos para manejarse en el terminal"},{"location":"section/EntLinux/#crear-archivos-y-directorios","text":"A modo de tutorial, puede ser interesante seguir los comandos que aqu\u00ed se muestran. Para ello, en primer lugar vamos a crear un subdirectorio dentro del directorio /tmp y nos ubicaremos dentro de ese subdirectorio: mkdir /tmp/tutorial cd /tmp/tutorial El comando mkdir es una abreviatura de \"make directory\" y se utiliza para crear nuevos directorios vac\u00edos. Permite incluso crear varios directorios en un s\u00f3lo comando utilizando el n\u00famero de par\u00e1metros o argumentos adecuado: mkdir dir1 dir2 dir3 Si quisi\u00e9ramos listar los directorios creados, podr\u00edamos utilizar el comando para ello: ls Podr\u00edamos incluso darle una vuleta de tuerca al comando. Ya que los directorios que crea est\u00e1n vac\u00edos, pero si quisi\u00e9ramos crear una carpeta con subdirectorios en su interior utilizando un \u00fanico comando, har\u00edamos: mkdir -p dir4/dir5/dir6 ls El \"-p\" es lo que se conoce como un switch , que no son m\u00e1s que distintas opciones para modificar el comportamiento de un comando. Y podr\u00edamos movernos por los subdirectorios para comprobar que, efectivamente, se han creado: cd dir4 ls cd dir5 ls cd ../.. Ahora que ya sabemos c\u00f3mo crear varios directorios simplemente pas\u00e1ndolos como argumentos separados al mkdircomando. Pero supongamos que queremos crear un directorio con un espacio en el nombre. Vamos a intentarlo: mkdir otro directorio ls Pod\u00e9is intentar escribir esto en el terminal o, si s\u00f3is un poco suspicaces, os habr\u00e9is dado cuenta de lo que pasar\u00e1. Exactamente, se crearan dos directorios distintos. Si queremos trabajar con espacios en nombres de archivos o directorios, necesitamos \"escaparlos\" . \u00c9ste es un termino inform\u00e1tico que hace referencia a c\u00f3digos especiales para decirle a la m\u00e1quina que determinados caracteres y s\u00edmbolos los trate de forma diferente a lo normal. Como ejemplo: mkdir \"carpeta 1\" mkdir 'carpeta 2' mkdir carpeta \\ 3 mkdir \"carpeta 4\" \"carpeta 5\" mkdir -p \"carpeta 6\" / \"carpeta 7\" ls Todos estos comandos crear\u00e1n carpetas independientes y con espacios en los nombres. Debido a lo engorroso de tener que escapar este tipo de caracteres cada vez que se utilizan en el terminal, la tendencia es usar nombres sin espacios, sustituyendo estos por guiones (\"-\") o guiones bajos (\"_\")","title":"Crear archivos y directorios"},{"location":"section/EntLinux/#creando-archivos-usando-la-redireccion","text":"Supongamos que quisi\u00e9ramos capturar la salida del comando \"ls\" como un archivo de texto que podemos manipular con posterioridad. Todo lo que tenemos que hacer es agregar el car\u00e1cter mayor que (\u201d>\u201d) al final de nuestra l\u00ednea de comando, seguido del nombre del archivo en el que escribir: ls > salida.txt No se imprimir\u00e1 nada por pantalla puesto que hemos redirigido la salida del comando al archivo salida.txt. En todo caso, podemos utilizar el comando \"cat\" para ver el contenido del archivo: cat output.txt Otro ejemplo de redirecci\u00f3n podr\u00edamos llevarlo a cabo utilizando el comando \"echo\", el cual simplemente imprime por pantalla los argumentos que recibe. Sin embargo, podr\u00edamos redirigir la salida a un archivo y crear ficheros nuevos: echo \"Esto es una prueba\" > test_1.txt echo \"Esto es otra prueba\" > test_2.txt echo \"Otra prueba m\u00e1s\" > test_3.txt ls Y para ver el contenido de los archivos podemos utilizar nuevamente \"cat\". Incluso podr\u00edamos pasarle el nombre de los 3 archivos simult\u00e1nemamente como argumentos: cat test_1.txt test_2.txt test_3.txt Cuando desee pasar varios nombres de archivo a un solo comando, existen algunos atajos \u00fatiles que pueden ahorrarle mucho escribir si los archivos tienen nombres similares. Se puede utilizar un signo de interrogaci\u00f3n (\"?\") Para indicar \"cualquier car\u00e1cter\" dentro del nombre del archivo. Se puede utilizar un asterisco (\u201d*\u201d) para indicar \u201ccero o m\u00e1s caracteres\u201d. A veces se los denomina caracteres \"comod\u00edn\". Un par de ejemplos pueden ayudar, los siguientes comandos hacen lo mismo: cat test_1.txt test_2.txt test_3.txt cat test_?.txt cat test_* Atenci\u00f3n Precisamente por las car\u00e1cteres comod\u00edn en los comandos, tampoco es recomendable usar signos de puntuaci\u00f3n en los nombres de los archivos, de otra forma habr\u00eda que \"escapar\" estos caracteres a la hora de trabajar en la l\u00ednea de comandos con los nombres de los archivos Observando la salida de ls , se puede ver que los \u00fanicos archivos o carpetas que comienzan por \"t\" son los tres archivos de prueba que acabamos de crear, por lo que incluso se podr\u00eda simplificar ese \u00faltimo comando a\u00fan m\u00e1s cat t* , lo que significa \"concatenar todos los archivos cuyos nombres comienzan con una t y van seguidos de cero o m\u00e1s caracteres \u201d. Usemos esta capacidad para unir todos nuestros archivos en un solo archivo nuevo y luego verlo: cat t* > combinado.txt cat combinado.txt Hay que tener cuidado puesto que la shell borra todo el contenido del archivo antes de escribir la salida del comando cat en \u00e9l. Debido a esto, debe tener mucha precauci\u00f3n al usar la redirecci\u00f3n para asegurarse de no sobrescribir accidentalmente un archivo que necesita. Si lo que queremos es a\u00f1adir al final del archivo en lugar de reemplazar el contenido del mismo, debemos poner un doble s\u00edmbolo de \"mayor que\": cat t* >> combinado.txt echo \"\u00a1He a\u00f1adido una l\u00ednea!\" >> combinado.txt cat combinado.txt Cuando el contenido del archivo es mayor de lo que se puede mostrar en la terminal, se necesita utilizar lo que se conoce como pager para que pagine la salida por el terminal. El pager m\u00e1s antiguo era more porque colocaba una l\u00ednea de texto que dec\u00eda \"--More--\" para indicar que a\u00fan hab\u00eda contenido por mostrar. Posteriormente surgi\u00f3 el pager less con el fin de reemplazar a more . less archivo_muy_largo.txt Al examinar un archivo utilizando less , se pueden utilizar las teclas de flecha arriba, flecha abajo, Re P\u00e1g, Av P\u00e1g, Inicio y Fin para desplazarse a trav\u00e9s del fichero.","title":"Creando archivos usando la redirecci\u00f3n"},{"location":"section/EntLinux/#a-proposito-de-las-mayusculas-y-minusculas","text":"Los sistemas Unix son \"case sensitive\", es decir, distinguen entre may\u00fasculas y min\u00fasculas, es decir, consideran que \u201cA.txt\u201d y \u201ca.txt\u201d son dos archivos diferentes. Ejecutando los siguientes comandos se terminar\u00eda con tres archivos distintos: echo \"Con minusculas\" > a.txt echo \"Con mayusculas\" > A.TXT echo \"Ambas mezcladas\" > A.txt Se debe tener precauci\u00f3n con esto puesto que Windows es \"case insensitive\" y no distinguir\u00eda entre esos tres archivos, los tratar\u00eda como uno solo. Buenas pr\u00e1cticas de nomenclatura Cuando se considera tanto la distinci\u00f3n entre may\u00fasculas y min\u00fasculas como el escape, una buena regla general es mantener los nombres de los archivos en min\u00fasculas, con solo letras, n\u00fameros, guiones bajos y guiones. Adem\u00e1s, aunque en linux los archivos no tienen extensi\u00f3n, se la pondremos con el fin de facilitar el trabajo.","title":"A prop\u00f3sito de las may\u00fasculas y min\u00fasculas"},{"location":"section/EntLinux/#moviendo-y-manipulando-archivos","text":"Ahora que ya hemos aprendido a crear archivos, vemos que tareas comunes podemos realizar con ellos. Por ejemplo, si queremos mover nuestro archivo combinado.txt al directorio dir1 , usando el comando mv (move) : mv combinado.txt dir1 Para confirmar que el comando se ha ejecutado con \u00e9xito podemos utilizar el comando ls para ver que el fichero ya no est\u00e1 en el directorio de trabajo, luego con cd dir1 cambiar a ese directorio, hacer ls para ver que ahora el fichero est\u00e1 all\u00ed, y luego cd .. para movernos al directorio de trabajo nuevamente. O tambi\u00e9n podemos ahorrarnos la mayor parte de este trabajo de escritura pasando una ruta directamente al comando ls consultar directamente el contenido de ese directorio: ls dir1","title":"Moviendo y manipulando archivos"},{"location":"section/EntLinux/#un-poco-de-fontaneria-tuberias","text":"","title":"Un poco de fontaner\u00eda (tuber\u00edas)"},{"location":"section/EntLinux/#la-linea-de-comandos-y-el-superusuario","text":"","title":"La l\u00ednea de comandos y el superusuario"},{"location":"section/EntLinux/#archivos-ocultos","text":"","title":"Archivos ocultos"},{"location":"section/EntWin/","text":"Entornos Windows Windows Server 2019 Active Directory y GPOs Actualizaciones del SO Manejo de credenciales Escalada de privilegios EDR","title":"Entornos Windows"},{"location":"section/EntWin/#entornos-windows","text":"","title":"Entornos Windows"},{"location":"section/EntWin/#windows-server-2019","text":"","title":"Windows Server 2019"},{"location":"section/EntWin/#active-directory-y-gpos","text":"","title":"Active Directory y GPOs"},{"location":"section/EntWin/#actualizaciones-del-so","text":"","title":"Actualizaciones del SO"},{"location":"section/EntWin/#manejo-de-credenciales","text":"","title":"Manejo de credenciales"},{"location":"section/EntWin/#escalada-de-privilegios","text":"","title":"Escalada de privilegios"},{"location":"section/EntWin/#edr","text":"","title":"EDR"},{"location":"section/webgrafia/","text":"\u00c1rbol de directorios en Linux Archwiki Manuel Mujica Linux.com baeldung.com geeksforgeeks.com The command line for beginners","title":"Webgraf\u00eda"}]}